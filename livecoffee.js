// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require, exports, module) {
    var CoffeeScript, DIVIDER_POSITION, MENU_ENTRY_POSITION, commands, css, editors, ext, ide, lineMatching, markup, menus, util;
    ide = require('core/ide');
    ext = require('core/ext');
    util = require('core/util');
    editors = require('ext/editors/editors');
    markup = require('text!ext/livecoffee/livecoffee.xml');
    menus = require("ext/menus/menus");
    commands = require("ext/commands/commands");
    CoffeeScript = require('ext/livecoffee/vendor/coffeescript');
    console.log(CoffeeScript);
    lineMatching = require('ext/livecoffee/vendor/cs_js_source_mapping');
    console.log(lineMatching);
    css = require("text!ext/livecoffee/livecoffee.css");
    console.log(css);
    DIVIDER_POSITION = 2100;
    MENU_ENTRY_POSITION = 2200;
    return ext.register('ext/livecoffee/livecoffee', {
      name: 'LiveCoffee',
      dev: 'Tane Piper',
      type: ext.GENERAL,
      alone: true,
      markup: markup,
      commands: {
        'livecoffee': {
          hint: 'Compile the current coffeescript document'
        }
      },
      hotitems: {},
      nodes: [],
      css: css,
      hook: function() {
        var _self;
        _self = this;
        commands.addCommand({
          name: "livecoffee",
          hint: "start livecoffee plugin",
          bindKey: {
            mac: "Command-K",
            win: "Ctrl-K"
          },
          exec: function() {
            return _self.livecoffee();
          }
        });
        this.nodes.push(menus.addItemByPath("Edit/~", new apf.divider(), DIVIDER_POSITION));
        this.nodes.push(menus.addItemByPath("Edit/LiveCoffee", new apf.item({
          command: "livecoffee"
        }), MENU_ENTRY_POSITION));
        this.hotitems['livecoffee'] = [this.nodes[1]];
      },
      livecoffee: function() {
        var ace, editor,
          _this = this;
        ext.initExtension(this);
        this.compile();
        this.liveCoffeeOutput.show();
        if (this.liveCoffeeOutput.visible) {
          editor = editors.currentEditor;
          ace = editor.amlEditor.$editor;
          editor.ceEditor.addEventListener('keyup', function() {
            return _this.compile();
          });
          editor.ceEditor.$ext.addEventListener('click', function() {
            var currentLine;
            if (_this.liveCoffeeOptMatchLines.checked) {
              currentLine = ace.getCursorPosition().row;
              return _this.liveCoffeeCodeOutput.$editor.gotoLine(_this.findMatchingLine(currentLine, _this.matchingLines));
            }
          });
        }
      },
      compile: function() {
        var ace, bare, compiledJS, currentLine, doc, editor, value;
        editor = editors.currentEditor;
        ace = editor.amlEditor.$editor;
        doc = editor.getDocument();
        value = doc.getValue();
        compiledJS = '';
        try {
          bare = this.liveCoffeeOptCompileBare.checked;
          compiledJS = CoffeeScript.compile(value, {
            bare: bare
          });
          this.matchingLines = lineMatching.source_line_mappings(value.split("\n"), compiledJS.split("\n"));
          this.liveCoffeeCodeOutput.setValue(compiledJS);
          if (this.liveCoffeeOptMatchLines.checked) {
            currentLine = ace.getCursorPosition().row;
            this.liveCoffeeCodeOutput.$editor.gotoLine(this.findMatchingLine(currentLine, this.matchingLines));
          }
          if (this.liveCoffeeOptCompileNodes.checked) {
            this.liveCoffeeNodeOutput.setValue(CoffeeScript.nodes(value));
          }
          if (this.liveCoffeeOptCompileTokens.checked) {
            this.liveCoffeeTokenOutput.setValue(CoffeeScript.tokens(value));
          }
        } catch (exp) {
          this.liveCoffeeCodeOutput.setValue(exp.message);
        }
      },
      findMatchingLine: function(lineNumber, matchingLines) {
        var line, matchingLine, _i, _len;
        matchingLine = 1;
        for (_i = 0, _len = matchingLines.length; _i < _len; _i++) {
          line = matchingLines[_i];
          if (lineNumber < line[0]) {
            return ++matchingLine;
          }
          matchingLine = line[1];
        }
      },
      init: function(amlNode) {
        var _this = this;
        apf.importCssString(css);
        liveCoffeeOptCompileBare.addEventListener('click', function() {
          return _this.compile();
        });
        this.liveCoffeeOptCompileBare = liveCoffeeOptCompileBare;
        liveCoffeeOptCompileNodes.addEventListener('click', function() {
          if (liveCoffeeOptCompileNodes.checked) {
            _this.liveCoffeeNodes.enable();
            return _this.compile();
          } else {
            return liveCoffeeNodes.disable();
          }
        });
        this.liveCoffeeOptCompileNodes = liveCoffeeOptCompileNodes;
        liveCoffeeOptCompileTokens.addEventListener('click', function() {
          if (liveCoffeeOptCompileTokens.checked) {
            _this.liveCoffeeTokens.enable();
            return _this.compile();
          } else {
            return _this.liveCoffeeTokens.disable();
          }
        });
        this.liveCoffeeOptCompileTokens = liveCoffeeOptCompileTokens;
        this.liveCoffeeOptMatchLines = liveCoffeeOptMatchLines;
        liveCoffeeCodeOutput.syntax = 'javascript';
        this.liveCoffeeCodeOutput = liveCoffeeCodeOutput;
        this.liveCoffeeOutput = liveCoffeeOutput;
        liveCoffeeNodes.disable();
        this.liveCoffeeNodes = liveCoffeeNodes;
        this.liveCoffeeNodeOutput = liveCoffeeNodeOutput;
        liveCoffeeTokens.disable();
        this.liveCoffeeTokens = liveCoffeeTokens;
        this.liveCoffeeTokenOutput = liveCoffeeTokenOutput;
      },
      enable: function() {
        this.nodes.each(function(item) {
          return item.enable();
        });
        return this.disabled = false;
      },
      disable: function() {
        this.nodes.each(function(item) {
          return item.disable();
        });
        return this.disabled = true;
      },
      destroy: function() {
        this.nodes.each(function(item) {
          item.destroy(true, true);
        });
        this.nodes = [];
        this.liveCoffeeOptCompileBare.destroy(true, true);
        this.liveCoffeeOptCompileNodes.destroy(true, true);
        this.liveCoffeeOptCompileTokens.destroy(true, true);
        this.liveCoffeeOptMatchLines.destroy(true, true);
        this.liveCoffeeCodeOutput.destroy(true, true);
        this.liveCoffeeOutput.destroy(true, true);
        this.liveCoffeeNodes.destroy(true, true);
        this.liveCoffeeNodeOutput.destroy(true, true);
        this.liveCoffeeTokens.destroy(true, true);
        this.liveCoffeeTokenOutput.destroy(true, true);
      }
    });
  });

}).call(this);
